AWSTemplateFormatVersion: '2010-09-09'
Description: Automates the deployment of resources to host a Cloud Resume Challenge website on S3

Parameters:
  AWSRegion:
    Type: String
    Description: AWS region where resources will be deployed
    Default: ap-northeast-2

  CloudResumeChallengeBucketName:
    Type: String
    Description: Name for the S3 bucket to host the website
    Default: mrbrown-cloud-resume-challenge

  LambdaRuntime:
    Type: String
    Description: Runtime for Lambda functions
    Default: python3.9

Resources:
  # S3 Bucket for Cloud Resume Challenge
  CloudResumeChallengeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref CloudResumeChallengeBucketName

  # # Origin Access Control Configuration for CloudFront Distribution
  # CloudFrontOriginAccessControl:
  #   Type: AWS::CloudFront::OriginAccessControl
  #   Properties:
  #     OriginAccessControlConfig:
  #       Name: cloud-resume-challenge-origin-access-control
  #       OriginAccessControlOriginType: s3
  #       SigningBehavior: always
  #       SigningProtocol: sigv4

  # # CloudFront Distribution to Deploy S3 Website
  # CloudFrontDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   DependsOn:
  #     - CloudResumeChallengeBucket
  #   Properties:
  #     DistributionConfig:
  #       Origins:
  #         - DomainName: !Sub "${CloudResumeChallengeBucketName}.s3.${AWS::Region}.amazonaws.com"
  #           Id: cloud-resume-challenge-cloudfront-distribution
  #           S3OriginConfig:
  #             OriginAccessIdentity: ""
  #           OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
  #       Enabled: "true"
  #       DefaultRootObject: index.html
  #       CustomErrorResponses:
  #         - ErrorCode: 404
  #           ResponseCode: 200
  #           ResponsePagePath: /index.html
  #         - ErrorCode: 403
  #           ResponseCode: 200
  #           ResponsePagePath: /index.html
  #       HttpVersion: http2
  #       Aliases:
  #         - charlescloudjourney.com
  #       DefaultCacheBehavior:
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #         Compress: true
  #         TargetOriginId: cloud-resume-challenge-cloudfront-distribution
  #         ForwardedValues:
  #           QueryString: "false"
  #           Cookies:
  #             Forward: none
  #         ViewerProtocolPolicy: redirect-to-https

  # # Bucket Policy for CloudFront to Access S3 Website
  # CloudResumeChallengeBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref CloudResumeChallengeBucketName
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: "cloudfront.amazonaws.com"
  #           Action: "s3:GetObject"
  #           Resource: !Sub "arn:aws:s3:::${CloudResumeChallengeBucketName}/*"
  #           Condition:
  #             StringEquals:
  #               AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # DynamoDB table for storing visitors data
  VisitorsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      TableName: VisitorsTable
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # IAM Role for the AddAnyVisitor Lambda Function
  AddAnyVisitorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AddAnyVisitorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt VisitorsTable.Arn

  # Lambda Function to Add DynamoDB Item to VisitorsTable
  AddAnyVisitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt AddAnyVisitorRole.Arn
      Runtime: !Ref LambdaRuntime
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('VisitorsTable')
              table.put_item(
                  Item={
                      'ID': 'Any',
                      'VisitCount': 0
                  }
              )
              return 'Item added successfully'

  # IAM Role for the AddOneToVisitCount Lambda Function
  AddOneToVisitCountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AddOneToVisitCountPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !GetAtt VisitorsTable.Arn

  # Lambda Function to Add One to VisitCount
  AddOneToVisitCountFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          
          dynamodb_client = boto3.resource('dynamodb')
          table = dynamodb_client.Table('VisitorsTable')
          
          def lambda_handler(event, context):
              try:
                
                  headers = {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': 'https://charlescloudjourney.com, https://s3.ap-northeast-2.amazonaws.com',
                      'Access-Control-Allow-Headers': 'Origin, Content-Type, Accept',
                      'Access-Control-Allow-Methods': 'OPTIONS, POST, GET',
                  }
                  
                  # Handle preflight OPTIONS request
                  if event['httpMethod'] == 'OPTIONS':
                      print("Preflight request received")
                      return {
                          'statusCode': 200,
                          'headers': headers,
                          'body': json.dumps({'Message': 'Preflight request successful'}),
                      }
                  
                  response_table = table.update_item(
                      Key={'ID': "Any"},
                      UpdateExpression="SET VisitCount = VisitCount + :val",
                      ExpressionAttributeValues={':val' : 1},
                      ReturnValues="UPDATED_NEW"
                  )
                  
                  response = {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({'Message': 'Item updated successfully', 'UpdatedAttributes': response_table['Attributes']}, default=str)
                  }
                  
                  print("Received event: " + json.dumps(event))
                  print("Regular request received. Response:", response)
                  
                  return response
          
              except Exception as e:
                  
                  print("Received event: " + json.dumps(event))
                  print("Error:", str(e))
                  
                  error_response = {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                      },
                      'body': json.dumps({'error': str(e)}),
                  }
                  
                  print("Sending error response:", error_response)
                  
                  return error_response
      Handler: index.lambda_handler
      Role: !GetAtt AddOneToVisitCountRole.Arn
      Runtime: !Ref LambdaRuntime

  # HTTP API to Count Visitors
  CloudResumeChallengeAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: CloudResumeChallengeAPI
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - "https://charlescloudjourney.com"
        AllowHeaders:
          - "origin"
          - "content-type"
          - "accept"
        AllowMethods:
          - "GET"
          - "POST"
          - "OPTIONS"

  # HTTP API Integration for AddOneToVisitCountFunction
  AddOneToVisitCountIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref CloudResumeChallengeAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddOneToVisitCountFunction.Arn}/invocations"
      PayloadFormatVersion: "1.0"

  # HTTP API Route for AddOneToVisitCountFunction
  VisitCountRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref CloudResumeChallengeAPI
      RouteKey: GET /visitcount
      Target: !Sub "integrations/${AddOneToVisitCountIntegration}"
  
  # Stage for the HTTP API
  APIStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref CloudResumeChallengeAPI
      StageName: "$default"
      AutoDeploy: true

  # Deployment for the HTTP API
  APIDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref CloudResumeChallengeAPI
      StageName: !Ref APIStage
